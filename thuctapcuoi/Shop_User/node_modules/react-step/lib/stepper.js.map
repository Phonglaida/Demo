{"version":3,"sources":["","../src/stepper.tsx"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","React","Children","Component","stepperContext","Stepper","props","allowNavigate","fn","toIndex","navigate","setPageIndex","index","pages","allowJumpAhead","allowJumpBack","currentPage","pageIndex","length","RangeError","page","canAdvance","onAdvance","canReverse","onReverse","onLeave","nextPage","onEnter","_setIndex","state","canFinish","nextProps","onChange","children","count","createElement","setState","childContextTypes"],"mappings":"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","file":"stepper.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React, { Children, Component } from 'react';\nimport { stepperContext } from './entities';\n/**\n * The component where a stepper is configured and holds all state\n * and logic for navigating a stepper.\n *\n * It does not render any UI by itself and must be accompanied by\n * UI components like the DotTracker, Advance and Reverse Buttons or others.\n *\n * ### Usage\n * ```\n * <Stepper pages={[{component: PageOne}, {component: PageTwo}]}>\n *  <StepperView />\n *  <Row>\n *    <ReverseButton>Back</ReverseButton>\n *    <DotTracker />\n *    <AdvanceButton>Next</AdvanceButton>\n *  </Row>\n * </Stepper>\n * ```\n */\nexport class Stepper extends Component {\n    constructor(props) {\n        super(props);\n        this.allowNavigate = (fn, toIndex) => __awaiter(this, void 0, void 0, function* () {\n            if (fn) {\n                const navigate = yield fn(toIndex);\n                return navigate !== false;\n            }\n            else\n                return true;\n        });\n        this.setPageIndex = (index) => __awaiter(this, void 0, void 0, function* () {\n            const { pages, allowJumpAhead, allowJumpBack = true } = this.props;\n            const currentPage = this.pageIndex;\n            if (index >= pages.length)\n                throw RangeError(`index ${index} is higher than avalible pages ${pages.length}`);\n            if (index < 0)\n                throw RangeError(`index ${index} is lower than zero`);\n            const page = pages[currentPage];\n            if (index > currentPage) {\n                if (index > currentPage + 1 && !allowJumpAhead)\n                    return false;\n                if (!this.canAdvance || !(yield this.allowNavigate(page.onAdvance, index)))\n                    return false;\n            }\n            else {\n                if (index < currentPage - 1 && !allowJumpBack)\n                    return false;\n                if (!this.canReverse || !(yield this.allowNavigate(page.onReverse, index)))\n                    return false;\n            }\n            if (!(yield this.allowNavigate(page.onLeave, index)))\n                return false;\n            const nextPage = pages[index];\n            yield this.allowNavigate(nextPage.onEnter, currentPage);\n            this._setIndex(index);\n        });\n        this.state = { currentPage: props.index || 0 };\n    }\n    get pageIndex() {\n        if (this.props.onChange)\n            return this.props.index;\n        else\n            return this.state.currentPage;\n    }\n    get canAdvance() {\n        const { pages } = this.props;\n        const currentPage = this.pageIndex;\n        if (currentPage + 1 >= pages.length)\n            return false;\n        const page = pages[currentPage];\n        return !page.canAdvance || page.canAdvance();\n    }\n    get canFinish() {\n        const { pages } = this.props;\n        const currentPage = this.pageIndex;\n        if (currentPage + 1 < pages.length)\n            return false;\n        const page = pages[currentPage];\n        return !page.canAdvance || page.canAdvance();\n    }\n    get canReverse() {\n        const currentPage = this.pageIndex;\n        if (currentPage <= 0)\n            return false;\n        const page = this.props.pages[currentPage];\n        return !page.canReverse || page.canReverse();\n    }\n    getChildContext() {\n        return {\n            pages: this.props.pages,\n            currentPage: this.pageIndex,\n            canAdvance: this.canAdvance,\n            canFinish: this.canFinish,\n            canReverse: this.canReverse,\n            setPageIndex: this.setPageIndex,\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.pages.length <= this.pageIndex) {\n            this._setIndex(0);\n        }\n        if (nextProps.index !== this.props.index &&\n            !nextProps.onChange &&\n            typeof nextProps.index === 'number') {\n            this._setIndex(nextProps.index);\n        }\n    }\n    render() {\n        const { children } = this.props;\n        return Children.count(children) < 2 ? children : (React.createElement(\"div\", null, children));\n    }\n    _setIndex(index) {\n        if (this.props.onChange) {\n            this.props.onChange(index);\n        }\n        else {\n            this.setState({ currentPage: index });\n        }\n    }\n}\nStepper.childContextTypes = stepperContext;\n","import {Requireable} from 'prop-types'\nimport React, {Children, Component, ReactElement} from 'react'\nimport {PageConfig, stepperContext} from './entities'\n\nexport {Requireable}\n\nexport type Props = {\n  /**\n   * The page index to set as active page\n   */\n  index?: number\n  /**\n   * Called when the page changes. If this is passed, the Stepper\n   * becomes controlled and will expect the parent to maintain the state and update\n   * the index property appropriately.\n   */\n  onChange?: (index: number) => void\n  pages: Array<PageConfig>\n  /**\n   * Allow reversing more than one step at a time\n   * @default true\n   */\n  allowJumpBack?: boolean\n  /**\n   * Allow advancing more than one step at a time\n   * @default false\n   */\n  allowJumpAhead?: boolean\n}\n\nexport type State = {\n  currentPage?: number\n}\n\n/**\n * The component where a stepper is configured and holds all state\n * and logic for navigating a stepper.\n *\n * It does not render any UI by itself and must be accompanied by\n * UI components like the DotTracker, Advance and Reverse Buttons or others.\n *\n * ### Usage\n * ```\n * <Stepper pages={[{component: PageOne}, {component: PageTwo}]}>\n *  <StepperView />\n *  <Row>\n *    <ReverseButton>Back</ReverseButton>\n *    <DotTracker />\n *    <AdvanceButton>Next</AdvanceButton>\n *  </Row>\n * </Stepper>\n * ```\n */\nexport class Stepper extends Component<Props, State> {\n  static childContextTypes = stepperContext\n\n  get pageIndex() {\n    if (this.props.onChange) return this.props.index\n    else return this.state.currentPage\n  }\n\n  get canAdvance() {\n    const {pages} = this.props\n    const currentPage = this.pageIndex\n    if (currentPage + 1 >= pages.length) return false\n    const page = pages[currentPage]\n    return !page.canAdvance || page.canAdvance()\n  }\n\n  get canFinish() {\n    const {pages} = this.props\n    const currentPage = this.pageIndex\n    if (currentPage + 1 < pages.length) return false\n    const page = pages[currentPage]\n    return !page.canAdvance || page.canAdvance()\n  }\n\n  get canReverse() {\n    const currentPage = this.pageIndex\n    if (currentPage <= 0) return false\n    const page = this.props.pages[currentPage]\n    return !page.canReverse || page.canReverse()\n  }\n\n  allowNavigate = async (fn, toIndex: number) => {\n    if (fn) {\n      const navigate = await fn(toIndex)\n      return navigate !== false\n    } else return true\n  }\n  setPageIndex = async (index: number) => {\n    const {pages, allowJumpAhead, allowJumpBack = true} = this.props\n    const currentPage = this.pageIndex\n\n    if (index >= pages.length)\n      throw RangeError(\n        `index ${index} is higher than avalible pages ${pages.length}`,\n      )\n    if (index < 0) throw RangeError(`index ${index} is lower than zero`)\n\n    const page = pages[currentPage]\n\n    if (index > currentPage) {\n      if (index > currentPage + 1 && !allowJumpAhead) return false\n      if (!this.canAdvance || !await this.allowNavigate(page.onAdvance, index))\n        return false\n    } else {\n      if (index < currentPage - 1 && !allowJumpBack) return false\n      if (!this.canReverse || !await this.allowNavigate(page.onReverse, index))\n        return false\n    }\n    if (!await this.allowNavigate(page.onLeave, index)) return false\n\n    const nextPage = pages[index]\n    await this.allowNavigate(nextPage.onEnter, currentPage)\n\n    this._setIndex(index)\n  }\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {currentPage: props.index || 0}\n  }\n\n  getChildContext() {\n    return {\n      pages: this.props.pages,\n      currentPage: this.pageIndex,\n      canAdvance: this.canAdvance,\n      canFinish: this.canFinish,\n      canReverse: this.canReverse,\n      setPageIndex: this.setPageIndex,\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pages.length <= this.pageIndex) {\n      this._setIndex(0)\n    }\n    if (\n      nextProps.index !== this.props.index &&\n      !nextProps.onChange &&\n      typeof nextProps.index === 'number'\n    ) {\n      this._setIndex(nextProps.index)\n    }\n  }\n\n  render() {\n    const {children} = this.props\n\n    return Children.count(children) < 2 ? (\n      children as ReactElement<any>\n    ) : (\n      <div>{children}</div>\n    )\n  }\n\n  private _setIndex(index: number) {\n    if (this.props.onChange) {\n      this.props.onChange(index)\n    } else {\n      this.setState({currentPage: index})\n    }\n  }\n}\n"]}