{"version":3,"sources":["../src/entities.tsx","entities.js"],"names":["stepperContext","pages","PropTypes","array","currentPage","number","canAdvance","bool","canFinish","canReverse","setPageIndex","func"],"mappings":";;;;;;;AAAA;;;;;;AAGA;;;AAGO,IAAMA,0CAAiB;AAC5BC,WAAOC,oBAAUC,KADW;AAE5BC,iBAAaF,oBAAUG,MAFK;AAG5BC,gBAAYJ,oBAAUK,IAHM;AAI5BC,eAAWN,oBAAUK,IAJO;AAK5BE,gBAAYP,oBAAUK,IALM;AAM5BG,kBAAcR,oBAAUS;AANI,CAAvB;ACMP","file":"entities.js","sourcesContent":["import PropTypes from 'prop-types'\nimport {ReactElement, ReactType} from 'react'\n\n/**\n * The stepper context as PropTypes to be consumed by React\n */\nexport const stepperContext = {\n  pages: PropTypes.array,\n  currentPage: PropTypes.number,\n  canAdvance: PropTypes.bool,\n  canFinish: PropTypes.bool,\n  canReverse: PropTypes.bool,\n  setPageIndex: PropTypes.func,\n}\n\n/**\n * The context that is avalible inside a stepper and is\n * consumed by the various UI components\n */\nexport type Context = {\n  pages: Array<PageConfig>\n  currentPage: number\n  canAdvance: boolean\n  canFinish: boolean\n  canReverse: boolean\n  setPageIndex: (index: number) => void\n}\n\nexport type Awaitable<T> = Promise<T> | T\n\n/**\n * The allowed page statuses\n */\nexport type Status = 'done' | 'alert'\n\n/**\n * A page in the stepper\n */\nexport type PageConfig = {\n  title?: string\n  subTitle?: string\n  status?: Status\n  /**\n   * Callback when the page is about to be set as active.\n   *\n   * If a Promise is returned, it will be awaited before the page is actived.\n   * This is not called when the stepper is first rendered.\n   */\n  onEnter?: (previousIndex: number) => Awaitable<void>\n  /**\n   * Callback when the page is about the be left.\n   *\n   * If a Promise is returned, it will be awaited before the next page is actived.\n   * If false or a promise that resolves to false is returned the navigation is aborted.\n   */\n  onLeave?: (nextIndex: number) => Awaitable<void | boolean>\n  /**\n   * Callback when the page is about the be left for a subsequent page.\n   *\n   * If a Promise is returned, it will be awaited before the next page is actived.\n   * If false or a promise that resolves to false is returned the navigation is aborted.\n   */\n  onAdvance?: (nextIndex: number) => Awaitable<void | boolean>\n  /**\n   * Callback when the page is about the be left for a preceding page.\n   *\n   * If a Promise is returned, it will be awaited before the next page is actived.\n   * If false or a promise that resolves to false is returned the navigation is aborted.\n   */\n  onReverse?: (nextIndex: number) => Awaitable<void | boolean>\n  /**\n   * Controls whenever the page is allow to be left for a subsequent page.\n   */\n  canAdvance?: () => boolean\n  /**\n   * Controls whenever the page is allow to be left for a preceding page.\n   */\n  canReverse?: () => boolean\n  /**\n   * A function to render when this page is active, takes precedence over\n   * component if both is set.\n   */\n  render?: () => ReactElement<any>\n  /**\n   * The component to render when this page is active. Either component or\n   * render must be specified.\n   */\n  component?: ReactType\n}\n","import PropTypes from 'prop-types';\n/**\n * The stepper context as PropTypes to be consumed by React\n */\nexport var stepperContext = {\n    pages: PropTypes.array,\n    currentPage: PropTypes.number,\n    canAdvance: PropTypes.bool,\n    canFinish: PropTypes.bool,\n    canReverse: PropTypes.bool,\n    setPageIndex: PropTypes.func\n};\n//# sourceMappingURL=entities.js.map\n"]}