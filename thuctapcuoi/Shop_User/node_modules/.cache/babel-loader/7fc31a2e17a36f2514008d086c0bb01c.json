{"ast":null,"code":"import { SET_NEW_ORDERS, SET_RELOADTRACKINGORDER } from \"redux/reducers/shareReducer\";\nimport store from \"../redux/store\";\nimport { ReloadType } from \"./MessageHelper\";\nconst newOrderMsg = Object.freeze({\n  0: \"CountNewOrders\"\n});\nexport const ProcessMsgNewOrder = message => {\n  try {\n    if (message) {\n      store.dispatch({\n        type: SET_NEW_ORDERS,\n        payload: message\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const ProcessMsgReload = message => {\n  try {\n    switch (message) {\n      case ReloadType.Tracking_Order:\n        store.dispatch({\n          type: SET_RELOADTRACKINGORDER\n        });\n        break;\n      default:\n        break;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const ProcessMsgCurrentTime = message => {\n  try {\n    if (message === undefined || message === null || message === \"\") {\n      return;\n    }\n    store.dispatch({\n      type: 'SetServerTime',\n      payload: message\n    });\n  } catch (error) {\n    console.log(\"ProcessMsgCurrentTime\", error);\n  }\n};","map":{"version":3,"names":["SET_NEW_ORDERS","SET_RELOADTRACKINGORDER","store","ReloadType","newOrderMsg","Object","freeze","ProcessMsgNewOrder","message","dispatch","type","payload","error","console","log","ProcessMsgReload","Tracking_Order","ProcessMsgCurrentTime","undefined"],"sources":["C:/Users/Phong/Desktop/ReactShop/1223/Shop_User/src/utils/processMsgHelper.js"],"sourcesContent":["import { SET_NEW_ORDERS, SET_RELOADTRACKINGORDER } from \"redux/reducers/shareReducer\";\r\nimport store from \"../redux/store\";\r\nimport { ReloadType } from \"./MessageHelper\";\r\n\r\n\r\nconst newOrderMsg = Object.freeze({\r\n    0: \"CountNewOrders\"\r\n})\r\n\r\nexport const ProcessMsgNewOrder = (message) => {\r\n    try {\r\n        if (message) {\r\n            store.dispatch({ type: SET_NEW_ORDERS, payload: message })\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const ProcessMsgReload = (message) => {\r\n    try {\r\n        switch (message) {\r\n            case ReloadType.Tracking_Order:\r\n                store.dispatch({ type: SET_RELOADTRACKINGORDER })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const ProcessMsgCurrentTime = (message) => {\r\n    try {\r\n        if (message === undefined || message === null || message === \"\") {\r\n            return;\r\n        }\r\n        store.dispatch({ type: 'SetServerTime', payload: message });\r\n    } catch (error) {\r\n        console.log(\"ProcessMsgCurrentTime\", error);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,uBAAuB,QAAQ,6BAA6B;AACrF,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAASC,UAAU,QAAQ,iBAAiB;AAG5C,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC9B,CAAC,EAAE;AACP,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;EAC3C,IAAI;IACA,IAAIA,OAAO,EAAE;MACTN,KAAK,CAACO,QAAQ,CAAC;QAAEC,IAAI,EAAEV,cAAc;QAAEW,OAAO,EAAEH;MAAQ,CAAC,CAAC;IAC9D;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIP,OAAO,IAAK;EACzC,IAAI;IACA,QAAQA,OAAO;MACX,KAAKL,UAAU,CAACa,cAAc;QAC1Bd,KAAK,CAACO,QAAQ,CAAC;UAAEC,IAAI,EAAET;QAAwB,CAAC,CAAC;QACjD;MACJ;QACI;IACR;EACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAGD,OAAO,MAAMK,qBAAqB,GAAIT,OAAO,IAAK;EAC9C,IAAI;IACA,IAAIA,OAAO,KAAKU,SAAS,IAAIV,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,EAAE,EAAE;MAC7D;IACJ;IACAN,KAAK,CAACO,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEH;IAAQ,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,KAAK,CAAC;EAC/C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}