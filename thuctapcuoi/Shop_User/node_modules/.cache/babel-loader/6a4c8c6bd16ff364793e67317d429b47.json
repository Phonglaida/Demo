{"ast":null,"code":"export function DateTimeDisplay_1(dateTime) {\n  // Chuyển đổi chuỗi thời gian sang đối tượng Date\n  try {\n    if (!dateTime) return \"\";\n    const date = new Date(dateTime);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    const formattedDateTime = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\n    return formattedDateTime;\n  } catch (e) {\n    console.error(e);\n    return '';\n  }\n}\nexport function formatDateToDdMmYyyy(date) {\n  if (!date) return \"\";\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  };\n  return new Intl.DateTimeFormat('en', options).format(date);\n}\nexport function formatNumberWithCommasAndDecimals(number, decimalPlaces = 2) {\n  try {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: decimalPlaces,\n      maximumFractionDigits: decimalPlaces\n    }).format(number);\n  } catch (e) {\n    console.error(e);\n    return '';\n  }\n}\n;\nexport function formatNumberWithCommas(number) {\n  try {\n    return new Intl.NumberFormat('en-US').format(number);\n  } catch (e) {\n    console.error(e);\n    return '';\n  }\n}\n;","map":{"version":3,"names":["DateTimeDisplay_1","dateTime","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedDateTime","e","console","error","formatDateToDdMmYyyy","options","Intl","DateTimeFormat","format","formatNumberWithCommasAndDecimals","number","decimalPlaces","NumberFormat","minimumFractionDigits","maximumFractionDigits","formatNumberWithCommas"],"sources":["C:/Users/Phong/Desktop/ReactShop/1223/Shop_User/src/utils/commonFunction.js"],"sourcesContent":["export function DateTimeDisplay_1(dateTime) {\r\n    // Chuyển đổi chuỗi thời gian sang đối tượng Date\r\n    try {\r\n\r\n        if (!dateTime) return \"\";\r\n\r\n        const date = new Date(dateTime);\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n        const hours = String(date.getHours()).padStart(2, '0');\r\n        const minutes = String(date.getMinutes()).padStart(2, '0');\r\n        const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n        const formattedDateTime = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\r\n\r\n        return formattedDateTime;\r\n    } catch (e) {\r\n        console.error(e);\r\n        return ''\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function formatDateToDdMmYyyy(date) {\r\n    if (!date) return \"\";\r\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\r\n    return new Intl.DateTimeFormat('en', options).format(date);\r\n}\r\n\r\nexport function formatNumberWithCommasAndDecimals(number, decimalPlaces = 2) {\r\n    try {\r\n        return new Intl.NumberFormat('en-US', {\r\n            minimumFractionDigits: decimalPlaces,\r\n            maximumFractionDigits: decimalPlaces,\r\n        }).format(number);\r\n    } catch (e) {\r\n        console.error(e);\r\n        return ''\r\n    }\r\n};\r\n\r\nexport function formatNumberWithCommas(number) {\r\n    try {\r\n        return new Intl.NumberFormat('en-US').format(number);\r\n    } catch (e) {\r\n        console.error(e);\r\n        return ''\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAO,SAASA,iBAAiBA,CAACC,QAAQ,EAAE;EACxC;EACA,IAAI;IAEA,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;IAExB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAAC;IAE/B,MAAMG,GAAG,GAAGC,MAAM,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,MAAMC,KAAK,GAAGH,MAAM,CAACH,IAAI,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMG,IAAI,GAAGR,IAAI,CAACS,WAAW,CAAC,CAAC;IAC/B,MAAMC,KAAK,GAAGP,MAAM,CAACH,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACtD,MAAMO,OAAO,GAAGT,MAAM,CAACH,IAAI,CAACa,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMS,OAAO,GAAGX,MAAM,CAACH,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,CAACV,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAE1D,MAAMW,iBAAiB,GAAG,GAAGd,GAAG,IAAII,KAAK,IAAIE,IAAI,IAAIE,KAAK,IAAIE,OAAO,IAAIE,OAAO,EAAE;IAElF,OAAOE,iBAAiB;EAC5B,CAAC,CAAC,OAAOC,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAO,EAAE;EACb;AAEJ;AAGA,OAAO,SAASG,oBAAoBA,CAACpB,IAAI,EAAE;EACvC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,MAAMqB,OAAO,GAAG;IAAEb,IAAI,EAAE,SAAS;IAAEF,KAAK,EAAE,SAAS;IAAEJ,GAAG,EAAE;EAAU,CAAC;EACrE,OAAO,IAAIoB,IAAI,CAACC,cAAc,CAAC,IAAI,EAAEF,OAAO,CAAC,CAACG,MAAM,CAACxB,IAAI,CAAC;AAC9D;AAEA,OAAO,SAASyB,iCAAiCA,CAACC,MAAM,EAAEC,aAAa,GAAG,CAAC,EAAE;EACzE,IAAI;IACA,OAAO,IAAIL,IAAI,CAACM,YAAY,CAAC,OAAO,EAAE;MAClCC,qBAAqB,EAAEF,aAAa;MACpCG,qBAAqB,EAAEH;IAC3B,CAAC,CAAC,CAACH,MAAM,CAACE,MAAM,CAAC;EACrB,CAAC,CAAC,OAAOT,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAO,EAAE;EACb;AACJ;AAAC;AAED,OAAO,SAASc,sBAAsBA,CAACL,MAAM,EAAE;EAC3C,IAAI;IACA,OAAO,IAAIJ,IAAI,CAACM,YAAY,CAAC,OAAO,CAAC,CAACJ,MAAM,CAACE,MAAM,CAAC;EACxD,CAAC,CAAC,OAAOT,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAO,EAAE;EACb;AACJ;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}