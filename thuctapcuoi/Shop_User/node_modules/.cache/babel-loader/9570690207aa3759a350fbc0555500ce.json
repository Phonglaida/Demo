{"ast":null,"code":"const validate = (value, rules) => {\n  let isValid = true;\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n      case \"maxLength\":\n        isValid = isValid && maxLengthValidator(value, rules[rule]);\n        break;\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n        break;\n      case \"isPhone\":\n        isValid = isValid && mobileValidator(value);\n        break;\n      default:\n        isValid = true;\n    }\n  }\n  return isValid;\n};\n\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\nconst minLengthValidator = (value, minLength) => {\n  return value.length >= minLength;\n};\n\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\nconst maxLengthValidator = (value, maxLength) => {\n  return value.length <= maxLength;\n};\n\n/**\r\n * Check to confirm that feild is required\r\n *\r\n * @param  value\r\n * @return\r\n */\nconst requiredValidator = value => {\n  return value !== null && value.trim() !== \"\";\n};\n\n/**\r\n * Email validation\r\n *\r\n * @param value\r\n * @return\r\n */\nconst emailValidator = value => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(value).toLowerCase());\n};\n\n/**\r\n * Name validation\r\n *\r\n * @param value\r\n * @return\r\n */\nconst nameValidator = value => {\n  var re = /^[a-zA-Z]+((['. ][a-zA-Z ])?[a-zA-Z]*)*$/;\n  return re.test(String(value).toLowerCase());\n};\n/**\r\n * Name validation\r\n *\r\n * @param value\r\n * @return\r\n */\nconst mobileValidator = value => {\n  var re = /^[0-9]*$/;\n  return re.test(String(value).toLowerCase());\n};\n/**\r\n * IP validation\r\n *\r\n * @param value\r\n * @return\r\n */\nconst ipValidator = value => {\n  var re = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n  return re.test(String(value));\n};\n/**\r\n * IP validation\r\n *\r\n * @param value\r\n * @return\r\n */\nconst dateValidator = value => {\n  var re = /^((0?[13578]|10|12)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1}))|(0?[2469]|11)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1})))$/;\n  return re.test(String(value));\n};\nexport default validate;","map":{"version":3,"names":["validate","value","rules","isValid","rule","minLengthValidator","maxLengthValidator","requiredValidator","emailValidator","mobileValidator","minLength","length","maxLength","trim","re","test","String","toLowerCase","nameValidator","ipValidator","dateValidator"],"sources":["E:/lam ho/thuctapcuoi/Shop_User/src/utils/Validator/index.js"],"sourcesContent":["\r\n\r\nconst validate = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  for (let rule in rules) {\r\n    switch (rule) {\r\n      case \"minLength\":\r\n        isValid = isValid && minLengthValidator(value, rules[rule]);\r\n        break;\r\n\r\n      case \"maxLength\":\r\n        isValid = isValid && maxLengthValidator(value, rules[rule]);\r\n        break;\r\n\r\n      case \"isRequired\":\r\n        isValid = isValid && requiredValidator(value);\r\n        break;\r\n\r\n      case \"isEmail\":\r\n        isValid = isValid && emailValidator(value);\r\n        break;\r\n\r\n      case \"isPhone\":\r\n        isValid = isValid && mobileValidator(value);\r\n        break;\r\n\r\n      default:\r\n        isValid = true;\r\n    }\r\n  }\r\n\r\n  return isValid;\r\n};\r\n\r\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\r\nconst minLengthValidator = (value, minLength) => {\r\n  return value.length >= minLength;\r\n};\r\n\r\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\r\nconst maxLengthValidator = (value, maxLength) => {\r\n  return value.length <= maxLength;\r\n};\r\n\r\n/**\r\n * Check to confirm that feild is required\r\n *\r\n * @param  value\r\n * @return\r\n */\r\nconst requiredValidator = value => {\r\n  return value !== null && value.trim() !== \"\";\r\n};\r\n\r\n/**\r\n * Email validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst emailValidator = value => {\r\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(value).toLowerCase());\r\n};\r\n\r\n/**\r\n * Name validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst nameValidator = value => {\r\n  var re = /^[a-zA-Z]+((['. ][a-zA-Z ])?[a-zA-Z]*)*$/;\r\n  return re.test(String(value).toLowerCase());\r\n};\r\n/**\r\n * Name validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst mobileValidator = value => {\r\n  var re = /^[0-9]*$/;\r\n  return re.test(String(value).toLowerCase());\r\n};\r\n/**\r\n * IP validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst ipValidator = value => {\r\n  var re = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n  return re.test(String(value));\r\n};\r\n/**\r\n * IP validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst dateValidator = value => {\r\n  var re = /^((0?[13578]|10|12)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1}))|(0?[2469]|11)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1})))$/;\r\n  return re.test(String(value));\r\n};\r\n\r\nexport default validate;\r\n"],"mappings":"AAEA,MAAMA,QAAQ,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EACjC,IAAIC,OAAO,GAAG,IAAI;EAElB,KAAK,IAAIC,IAAI,IAAIF,KAAK,EAAE;IACtB,QAAQE,IAAI;MACV,KAAK,WAAW;QACdD,OAAO,GAAGA,OAAO,IAAIE,kBAAkB,CAACJ,KAAK,EAAEC,KAAK,CAACE,IAAI,CAAC,CAAC;QAC3D;MAEF,KAAK,WAAW;QACdD,OAAO,GAAGA,OAAO,IAAIG,kBAAkB,CAACL,KAAK,EAAEC,KAAK,CAACE,IAAI,CAAC,CAAC;QAC3D;MAEF,KAAK,YAAY;QACfD,OAAO,GAAGA,OAAO,IAAII,iBAAiB,CAACN,KAAK,CAAC;QAC7C;MAEF,KAAK,SAAS;QACZE,OAAO,GAAGA,OAAO,IAAIK,cAAc,CAACP,KAAK,CAAC;QAC1C;MAEF,KAAK,SAAS;QACZE,OAAO,GAAGA,OAAO,IAAIM,eAAe,CAACR,KAAK,CAAC;QAC3C;MAEF;QACEE,OAAO,GAAG,IAAI;IAClB;EACF;EAEA,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,kBAAkB,GAAGA,CAACJ,KAAK,EAAES,SAAS,KAAK;EAC/C,OAAOT,KAAK,CAACU,MAAM,IAAID,SAAS;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMJ,kBAAkB,GAAGA,CAACL,KAAK,EAAEW,SAAS,KAAK;EAC/C,OAAOX,KAAK,CAACU,MAAM,IAAIC,SAAS;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAML,iBAAiB,GAAGN,KAAK,IAAI;EACjC,OAAOA,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACY,IAAI,CAAC,CAAC,KAAK,EAAE;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAML,cAAc,GAAGP,KAAK,IAAI;EAC9B,IAAIa,EAAE,GAAG,yJAAyJ;EAClK,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGjB,KAAK,IAAI;EAC7B,IAAIa,EAAE,GAAG,0CAA0C;EACnD,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMR,eAAe,GAAGR,KAAK,IAAI;EAC/B,IAAIa,EAAE,GAAG,UAAU;EACnB,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,WAAW,GAAGlB,KAAK,IAAI;EAC3B,IAAIa,EAAE,GAAG,2GAA2G;EACpH,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAAC;AAC/B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,aAAa,GAAGnB,KAAK,IAAI;EAC7B,IAAIa,EAAE,GAAG,4PAA4P;EACrQ,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,eAAeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}